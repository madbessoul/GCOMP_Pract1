"""
Author: Ari Ugarte

Notes : Madjid BESSOUL
The version of this script has been slightly modified to take
a set of mga outputs containing several strains (generated by
mga.sh script).

Mandatory modules : numpy, matplotlib
Included modules : fasta_parser
"""


import sys
import os
import getopt
import commands
import string

# We use NumPy too for convenient data structures
from numpy import genfromtxt

from Bio import SeqIO
from Bio.Seq import Seq

import pylab as plt


def main(argv=None):

    ### ARG MANAGER
    try:
        if argv is None:
            argv = sys.argv;
            if len(argv) <= 1:
                print "No Parameters provided";
        try:
            help_message = 'MetaGeneAnnotator Parser Script  \n usage: python pp.py -i [MetaGeneAnnotator output] '; #-o [fasta output] ';
            opts, args = getopt.getopt(argv[1:], "hi:", ["help","input="]);
        except getopt.error:
            print 'MetaGeneAnnotator Parser Script  \n usage: python pp.py -i [MetaGeneAnnotator output]'; #-o [fasta output] ';
        for option, value in opts:
            if option in ("-h", "--help"):
                raise Usage(help_message);
            if option in ("-i", "--input"):
                inputFile  = value;
            # if option in ("-o", "--output"):
            #     outputFile  = value
            # if option in ("-g", "--genome"):
            #     genomeFile = value
        try:
            inputFile #checks if input exists otherwise raises exception
        except:
            print "Input file not specified";
        # try:
        #     outputFile #checks if input exists otherwise raises exception
        # except:
        #     print "Output file not specified";
        # try:
        #     genomeFile #checks if input exists otherwise raises exception
        # except:
        #     print "Genome file not specified";
    except:
        print "\tfor help use --help or -h";
        return 2;
    ### END ARG MANAGER


    # Get and Translate CDS Sequences
    print "Loading annotation file\n"
    all_annotations = genfromtxt(inputFile,
        usecols=(0, 1, 2, 3, 4),
        dtype=([('strain','|S16'),
            ('id','|S16'),
            ('start','i8'),
            ('end', 'i8'),
            ('strand', '|S1')]))

    # Get the set of strains present in the annotation file
    strain_set = set(all_annotations['strain'])
    print "  found %i species in %s" % (len(strain_set), inputFile)


    # Plotting paramters
    common_params = dict(bins=100,
                     normed=True,
                     histtype='step')

    prot_nb = []
    fig = plt.figure(dpi=100)
    plt.subplot(121)
    for strain in strain_set:

        print "\tProcessing strain %s" % strain

        # Load genome of current strain
        # It's not a string, it's a seq object containing sequence id
        # and the nucleotide sequence.
        genome_dir = os.path.dirname(os.path.realpath(inputFile))
        genome = next(SeqIO.parse(genome_dir + '/' + strain + '.fna', 'fasta'))
        genomeId = genome.description.split(' ')[0]

        # Output file in fasta format - ex gi|556503834|ref|NC_000913.3|_gene_1
        outfile = open(genome_dir + "/" + strain + '.faa', 'w')

        # Get annotation of current genome
        strain_annotation = all_annotations[all_annotations['strain'] == strain]
        prot_nb.append(len(strain_annotation))
        print "\t\tWriting %i genes to .faa file" % len(strain_annotation)

        # Writing sequences to .faa file
        cds_count = 0
        cds_len_dist = []
        for cds in strain_annotation:

            # Get raw sequence using coordinates from annotations
            cds_dna_seq = genome.seq[cds['start']-1:cds['end']]

            # Remove \n from sequences before processing (not sure it's necessary)
            cds_len_dist.append(len(cds_dna_seq))

            # Write sequence ID to fasta file


            # Write crick aa seq if in fwd strand
            if cds['strand'] == '+':
                outfile.write('>%s%s|fwd\n' % (genomeId, cds['id']))
                outfile.write('%s\n' % cds_dna_seq.translate().tostring())

            # Else write watson aa seq (reverse complement)
            else:
                outfile.write('>%s%s|rev\n' % (genomeId, cds['id']))
                outfile.write('%s\n' % cds_dna_seq.reverse_complement().translate().tostring())

        plt.hist(cds_len_dist, label=strain, **common_params)
        outfile.close

    plt.legend(fontsize=8)
    plt.title('Gene size distribution among 21 strains of E. Coli')
    plt.xlabel("Protein size")
    plt.ylabel("Nb of proteins")

    plt.subplot(122)
    plt.bar(range(len(prot_nb)), prot_nb, label=strain_set, align='center')
    plt.xticks(range(len(prot_nb)), tuple(strain_set), rotation=90)
    plt.ylim(min(prot_nb) - 100, max(prot_nb) + 100)
    plt.title('Number of predicted proteins by strain')
    plt.xlabel('Strain')
    plt.ylabel('Protein size')
    plt.savefig(genome_dir + '/' + 'gene_stats.pdf')
    return 1;

if __name__ == "__main__":
    main()
